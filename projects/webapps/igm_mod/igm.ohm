/*
  IGM parser with OHM
    by Simanelix
      (Simon Glitch on GitHub)
    last updated:
      Sep/5/2023
    project started:
      Sep/1/2023
*/

// make sure letter and digit include underscore; this also adds line_break
Base {
  // make sure built-in rules are defined correctly
  letter
    := lower | upper | "_"
  letters
    = letter+
  lower
    := "a" .. "z"
  upper
    := "A" .. "Z"
  rawDigit
    = "0".."9"
  digit
    := rawDigit | "_"
  rawHexDigit
    = rawDigit | ("A" .. "F") | ("a" .. "f")
  hexDigit
    := digit | ("A" .. "F") | ("a" .. "f")
  alnum
    := letter | digit
  // I could've just done Line_break, but line_break works in lexical contexts as well, so ... im using it like this.
  line_break
    = (spaces ("\n" | ";") spaces)
}


// Basic Data (numbers, strings, object.dot expressions)
Basic_Data <: Base {
  // more formats!
  ident  (an identifier)
    = letter alnum*

  // an identifier dot expression
  ident_dot  (an identifier dot expression)
    = ident spaces "." spaces ident_dot
  ident_either
    = (~ident_dot) ident
    | ident_dot
  // any valid JavaScript number
  number  (a number)
    = (~"_") number_sub
  number_sub
    = binary_number
    | octal_number
    | hex_number
    | decimal_number
  a_fixed_point<aDigit>
    = aDigit+ ("." aDigit+) -- two_ints
    | "." aDigit+ -- intless
  a_int<aDigit>
    = ("-")? aDigit+
  a_numvalue<aDigit>
    = a_fixed_point<aDigit>
    | a_int<aDigit>
  a_float<aDigit>
    = a_numvalue<aDigit> ("e" | "E") ("+")? a_int<aDigit>
  a_number<aDigit>
    = a_float<aDigit> -- float
    | a_fixed_point<aDigit> -- a_fixed_point
    | a_int<aDigit> -- int
  decimal_number
    = a_number<digit>
  decimal_int
    = a_int<digit>
  binary_number
    = "0b" a_number<("0" | "1" | "_")>
  octal_number
    = "0o" a_number<(("0" .. "7") | "_")>
  hex_number
    = "0x" a_number<hexDigit>
  raw_hex_int
    = a_int<hexDigit>
  // alt name for hex
  hexadecimal_number
    = hex_number
  
  a_string<a_str_sep, a_escape, a_break>
    = a_str_sep ((~(a_str_sep | a_break)) (any | a_string_e<a_escape>))* a_str_sep
  a_string_e<a_escape>
    = (a_escape any)
  // this rule is just so beautiful!
  string
    = a_string<"\"", "\\", "\n"> -- double_quote
    | a_string<"'", "\\", "\n"> -- single_quote
    | a_string<"`", "\\", "\n"> -- backtick
    | a_string<"\"\"\"", "\\", end> -- tripple_double_quote

}


// for formatted data objects, such as numbers, dates, and regular expressions
Data <: Basic_Data {
  // date formatting
  date_Exp
    = date_sub_Exp era_Exp?
  era_Exp
    = ("B"? "CE") -- ce
    | "BC"
    | "AD"
    | ("B."? "C.E.") -- ce_dots
    | "B.C."
    | "A.D."
  date_sub_Exp
    = a_date_Exp<"/"> -- true_slashes
    | a_date_Exp<"."> -- true_dots
    | "/" loose_month_Exp
      "/" loose_day_Exp
      "/" loose_year_Exp -- slashes
    | "." loose_year_Exp
      "." loose_month_Exp
      "." loose_day_Exp -- dots
  loose_day_Exp
    = rawDigit rawDigit? -- day
  loose_month_Exp
    = rawDigit rawDigit? -- month_number
    | month_name -- month_name
  loose_year_Exp
    = rawDigit rawDigit rawDigit* -- year

  a_date_Exp<a_sep>
    = (true_year_Exp  a_sep true_month_Exp a_sep true_day_Exp  )
    | (true_year_Exp  a_sep true_day_Exp   a_sep true_month_Exp)
    | (true_month_Exp a_sep true_year_Exp  a_sep true_day_Exp  )
    | (true_month_Exp a_sep true_day_Exp   a_sep true_year_Exp )
    | (true_day_Exp   a_sep true_year_Exp  a_sep true_month_Exp)
    | (true_day_Exp   a_sep true_month_Exp a_sep true_year_Exp )
  true_year_Exp
    = rawDigit rawDigit rawDigit rawDigit -- year
  true_month_Exp
    = month_name -- month
  true_day_Exp
    = rawDigit rawDigit? -- day
  month_name
    = caseInsensitive<"jan"> caseInsensitive<"uary">?
    | caseInsensitive<"feb"> caseInsensitive<"uary">?
    | caseInsensitive<"mar"> caseInsensitive<"ch">?
    | caseInsensitive<"apr"> caseInsensitive<"il">?
    | caseInsensitive<"may"> caseInsensitive<"">?
    | caseInsensitive<"jun"> caseInsensitive<"e">?
    | caseInsensitive<"jul"> caseInsensitive<"y">?
    | caseInsensitive<"aug"> caseInsensitive<"ust">?
    | caseInsensitive<"sep"> caseInsensitive<"tember">?
    | caseInsensitive<"oct"> caseInsensitive<"ober">?
    | caseInsensitive<"nov"> caseInsensitive<"ember">?
    | caseInsensitive<"dec"> caseInsensitive<"ember">?
  // colors
  color_Exp
    = "#" rawHexDigit rawHexDigit rawHexDigit (rawHexDigit rawHexDigit rawHexDigit)?
  // units (measuerment, currency)
  a_Unit_Exp<A_Exp>
    = A_Exp space+ ident -- named
    | A_Exp spaces "%" -- percentage
  // IGM selectors
  Selector_Exp
    = ident ":" Selector_Exp -- recursion
    | ident
  // HTML element?
  html_Element_Exp
    = "<" ident ">" ((~("</")) any)* "</" ident ">"
  
  // grid position (like icons[0,0])
  Grid_Pos_Exp
  = ident_either "[" nonemptyListOf<decimal_int, ","> "]"
}

Regular_Expressions <: Data {
  // regular expression formatting
  reg_Exp  (a regular expression)
    = "/" regexp_body "/" regexp_flags
  // javascript only supports these flags, currently
  //   just match the original flag 6 times
  regexp_flags
    = regexp_flag? regexp_flag? regexp_flag? regexp_flag? regexp_flag? regexp_flag?
  regexp_flag
    = ("g"|"i"|"m"|"s"|"u"|"y")
  regexp_body
    = (regexp_sub_body (regexp_quantifier?))
  regexp_sub_body
    = (~"(") regexp_alts
    | "(" regexp_body? ")" -- parens
  regexp_alts
    = (~"[") regexp_stuff -- not_alternating
    | "[" regexp_dict_body "]" -- dict
    | listOf<regexp_stuff, "|"> -- pipe

  regexp_dict_body
    = (~("]" | "/")) ("\\\\" | "\\]" | (~("\\\\" | "\\]" | "\\/")) any)
  
  regexp_stuff
    = (~regexp_non_special) regexp_body regexp_non_special+ -- right_stuff
    | regexp_non_special+ (~regexp_non_special) regexp_body -- left_stuff
    | regexp_non_special+

  // im using a matching grammar to descibe a matching grammar!
  // this is REALLY bending my brain!!!
  regexp_quantifier
    = ("+" | "*" | "?" | regexp_quantity) "?"?
  regexp_quantity
    = "{" listOf<regexp_sub_quantity, ","> "}"
  regexp_sub_quantity
    = digit+ "+"?
  // this is not hard to understand at all; it is trivial, right?!
  //   the reason i added the "improper" sections was to add in error checking for regular expressions;
  //   you can remove them to make the ohm.parse fail, or you can use JavaScript to report the errors
  //     (after the ohm parser parses them)
  regexp_non_special
    = (~("{" | "[" | "(" | "\\" | "?" | "$" | "/")) any -- normal_character
    | "\\\\"
    | "\\" digit+ -- group_reference // or escaped character, depending on how many groups there are
    | (~(regexp_quantity)) "{" -- improper_quantifier // throw an error
    | "[" ~(regexp_dict_body "]") -- improper_dict // throw an error
    | "(" ~(((~")") any)+ ")") -- improper_group // throw an error
    | "\\" ~((~"_") digit) any -- escaped_character

}

// Arithmetic and simple script expressions
Arithmetic <: Regular_Expressions {
  Script_Exp
    = //ListOf<Script_Line_Exp, line_break> -- multiline
    | Script_Line_Exp line_break? -- singleline
    | line_break
  Script_Line_Exp
    = ident assignment Exp -- assignment
    | ident "(" Parameters_In_Paren ")" -- function_call
    | Exp
  assignment
    = ("+" | "+" | "-" | "*" | "/" | "+" | "+")? "="
  Assignment_Exp
    = "$"? Assignment_sub_Exp
  Assignment_sub_Exp
    = ident spaces " is " Exp -- is
    | ident spaces assignment Exp -- equal
    | ident spaces " is(" Exp ")" -- is_paren
  Parameters_In_Paren
    = ListOf<Exp, ",">
  
  Exp
    // first line is an optimization for one when an "expression" is just a singleton
    = Logic_And_Exp -- calculation

  Logic_And_Exp
    = Logic_And_Exp ("&&"  | " and " ) Logic_Or_Exp  -- logical_and
    | Logic_And_Exp ("!&&" | " nand ") Logic_Or_Exp  -- logical_nand
    | Logic_Or_Exp
  Logic_Or_Exp
    = Logic_Or_Exp ("||"  | " or " ) Bitwise_Exp  -- logical_or
    | Logic_Or_Exp ("!||" | " nor ") Bitwise_Exp  -- logical_nor
    | Logic_Or_Exp ("^||" | " xor ") Bitwise_Exp  -- logical_xor
    | Bitwise_Exp
  
  Bitwise_Exp
    = Bitwise_Exp "&"  Add_Exp  -- and
    | Bitwise_Exp "!&" Add_Exp  -- nand
    | Bitwise_Exp "|"  Add_Exp  -- or
    | Bitwise_Exp "!|" Add_Exp  -- nor
    | Bitwise_Exp "^|" Add_Exp  -- xor
    | Add_Exp
  
  Add_Exp
    = Add_Exp "+" Mul_Exp  -- plus
    | Add_Exp "-" Mul_Exp  -- minus
    | Mul_Exp

  Mul_Exp
    = Mul_Exp "*" Exp_Exp  -- times
    | Mul_Exp "/" Exp_Exp  -- divide
    | Exp_Exp

  Exp_Exp
    = Exp_Exp ("^" | "**") Pri_Exp  -- power
    | Pri_Exp

  // used for handling left-side unaries
  //   defaults to Any_Exp if there is no unary and the A_Exp is not a basic type
  A_Pri_Exp<A_Exp>
    = Single_Exp<A_Exp>
    // these unaries can be stacked; that might be a bad thing, but i am not sure; well see, i guess;
    | "++" Pri_Exp -- increment
    | "--" Pri_Exp -- decrement
    | "+" Pri_Exp  -- pos
    | "-" Pri_Exp  -- neg
    | ("!" | "no ") Pri_Exp  -- logical_not
    | "~" Pri_Exp  -- bitwise_not
    | Any_Exp
  Pri_Exp
    = A_Pri_Exp<Exp>
  // doesn't use the nesting brackets from Pri_Exp
  Single_Exp<A_Exp>
    = number
    | ident_either
    | string
    | "(" A_Exp ")"  -- paren
    | "[" Array_Exp "]"  -- array
    | "{" Obj_Exp "}"  -- json

  Array_Exp
  = ListOf<Exp, ",">
  
  Obj_Exp
  = ListOf<Obj_Prop, ",">
  Obj_Prop
  = ident ":" Exp -- informal
  | string ":" Exp -- formal
  // handles advanced data types, and falls back to right side unary if the data is a "simple" Exp
  Any_Exp
    = date_Exp
    | reg_Exp
    | color_Exp
    | Grid_Dim_Exp
    | Unit_Exp
    | Grid_Pos_Exp
    | Selector_Exp
    | html_Element_Exp
    | Single_Exp<Exp> "++" -- increment
    | Single_Exp<Exp> "--" -- decrement
    
  Unit_Exp
    = a_Unit_Exp<Pri_Exp>
  // grid dimensions, for spreadsheets
  Grid_Dim_Exp
    = Single_Exp<Exp> "by" Single_Exp<Exp>
}


// Idle Game Maker game expressions
Game <: Arithmetic {
  // now on to game's rules
  // Game can literally be empty!
  Game
    = ListOf<Section, line_break>
  Section
    = Section_Name line_break Section_Contents
  Section_Name
    = ((~line_break) any)+
  Section_Contents
    = (Section_Components line_break)? Section_Things?
  Section_Components
    = (~Thing_Name) Property (line_break Property)*
  Section_Things
    = Thing (line_break Thing)*
  Thing
    = Thing_Name (line_break Property)*
  Thing_Name
    = "*" main_name ("|" alt_name)*
  main_name
    = letter+
  alt_name
    = letter+
  Property
    = (~Property_Exp) Value_String -- invalid
    | Property_Exp
  Property_Exp
    = "@" Value_String -- shorthand
    | Desc_Property_Name ":" Value_String -- string
    | Property_Name ":" Property_Value -- misc
  // I really am adding a lot of alternatives here
  //   should I really add this many alternative names?
  Desc_Property_Name
    = Author_Property_Name
    | (caseInsensitive<"desc"> caseInsensitive<"ript">? caseInsensitive<"ion">? caseInsensitive<"s">?) -- description
    | (caseInsensitive<"id"> | caseInsensitive<"label"> | caseInsensitive<"text"> | caseInsensitive<"title"> | caseInsensitive<"name">) caseInsensitive<"s">? -- name
  Author_Property_Name
    = caseInsensitive<"by">
    | caseInsensitive<"author"> caseInsensitive<"s">? -- formal
  Property_Name
    = listOf<letters, spaces>
  Property_Value
    = ((~(((~Value_Function) Value_Expression) | Value_Function)) Value_String) -- string
    | ((~(Value_Function)) Value_Expression) -- expression
    | (Value_Function)
  
  // note to self: avoid expressions that can theoretically match nothing
  Value_Function
    = line_break* Action (line_break+ Action)*
  Value_Expression
    = (~end) Pri_Exp -- single_value
    | preposition_keyword Pri_Exp -- command_component
  Value_String
    = string
    | Value_String_Implied
  // consider removing this?
  Value_String_Implied
    = ((~line_break) any)+
  Action
    = (~Assignment_Exp) command Action_Parameters -- command
    | Assignment_Exp
  Action_Parameters
    = "(" Parameters_In_Paren ")" -- in_paren
    | Parameters
  // Parameters_In_Paren
  //   = ListOf<Exp, ","> -- comma_separated
  //   | ListOf<Exp, ";"> -- semicolon_separated
  Parameters
    = ListOf<Value_Expression, space>
  command
    = "do " ident -- do
    | command_keyword
    | ident
  command_keyword
    = ("yield" | "gain" | "earn" | "win" | "grant") -- yield
    | "lose" -- lose
    | ("increase" | "lower" | "multiply") -- assignment
    | "show"
    | "hide"
    | "light"
    | "dim"
    | "anim"
    | "log"
    | "clear"
    | "toast"
  preposition_keyword
    = "of"
    | "by"
    | "with"
}


